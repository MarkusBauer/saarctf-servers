---
- name: "Provision saarCTF VPN Image"
  hosts: default
  become: true
  vars:
    saarctf_config_dir: "{{ lookup('env', 'SAARCTF_CONFIG_DIR') }}"
    participants_hcloud_token: "{{ lookup('env', 'PARTICIPANTS_HCLOUD_TOKEN') }}"
    conntrack_accounting:
      git_repo: "{{ lookup('env', 'CONNTRACK_ACCOUNTING_GIT_REPO') }}"
      local_repo: /opt/conntrack_accounting
      data_dir: /root/conntrack_data
    telegraf_service_dir: /etc/systemd/system/telegraf.service.d

  tasks:
    - name: Copy scripts
      ansible.builtin.copy:
        src: scripts/
        dest: /root
        mode: "0700"

    - name: Pull /opt/config
      ansible.builtin.shell:
        chdir: /opt/config
        cmd: git pull

    - name: Set hostname
      ansible.builtin.hostname:
        # This was originally derived from the original hostname,
        # but I don't see it being set in the basis image
        name: saarctf-vpn
    # TODO: /etc/hosts shenanigans from setup script?

    - name: Install packages
      ansible.builtin.apt:
        update_cache: true
        pkg:
          - openvpn
          - easy-rsa
          - iptables
          - net-tools
          - procps
          - libbpf-dev
          - iftop
          - tcpdump
          - nmap
          - tshark
          - clang-15
          - nginx
          - telegraf
          - golang
          - cron

    - name: Set configuration facts from gameserver conf
      vars:
        fact_to_config:
          # Maps fact names to args for gameserver `config.py get <args>`
          influx_server: "databases postgres server"
          influx_password: "databases postgres password"
          pg_server: "databases postgres server"
          pg_username: "databases postgres username"
          pg_password: "databases postgres password"
          pg_database: "databases postgres database"
      include_tasks: ../fact_from_gameserver_conf.yml
      loop: "{{ fact_to_config | dict2items }}"

    - name: Add influx env vars
      ansible.builtin.lineinfile:
        path: /etc/default/telegraf
        line: "{{ item }}"
      loop:
        - "INFLUX_URL=http://{{ influx_server }}:8086"
        - "INFLUX_PASSWORD={{ influx_password }}"

    - name: Setup telegraf
      block:
        - name: Adjust telegraf config
          ansible.builtin.replace:
            dest: /etc/telegraf/telegraf.conf
            regexp: '{{ item.regexp }}'
            replace: '{{ item.replace }}'
          loop:
            - regexp: '^  interval = [^\n]*'
              replace: '  interval = "15s"'
            - regexp: '^  collection_jitter = [^\n]*'
              replace: '  collection_jitter = "1s"'
            - regexp: '^\[\[outputs.influxdb\]\]'
              replace: '# [[outputs.influxdb]]'

        - name: Copy telegraf.d files
          ansible.builtin.copy:
            src: telegraf.d/
            dest: /etc/telegraf/telegraf.d

        - name: Ensure telegraf service dir
          ansible.builtin.file:
            path: "{{ telegraf_service_dir }}"
            state: directory

        # Gives telegraf ping permissions
        - name: Copy telegraf service override
          ansible.builtin.copy:
            src: telegraf-override.conf
            dest: "{{ telegraf_service_dir }}/override.conf"

    - name: Setup srvstatus
      block:
        - name: Copy srvstatus files
          ansible.builtin.copy:
            src: ../srvstatus
            dest: /opt

        - name: Ensure srvstatus.sh is executable
          ansible.builtin.file:
            path: /opt/srvstatus/srvstatus.sh
            mode: 'u=rwx,g=rx,o=rx'

        - name: Copy srvstatus settings.ini
          ansible.builtin.copy:
            src: srvstatus-settings.ini
            dest: /opt/srvstatus/settings.ini

        - name: Install srvstatus deps
          community.general.make:
            chdir: /opt/srvstatus
            target: deps

    - name: Setup Conntrack accounting
      block:
        - name: Clone conntrack accounting repo
          ansible.builtin.git:
            force: yes
            repo: "{{ conntrack_accounting.git_repo }}"
            dest: "{{ conntrack_accounting.local_repo }}"

        - name: Resolve go dependencies
          ansible.builtin.command:
            chdir: "{{ conntrack_accounting.local_repo }}/{{ item }}"
            cmd: "go mod tidy -e"
          loop:
            - conntrack_accounting_tool
            - conntrack_psql_insert

        - name: Build accounting stuff
          ansible.builtin.command:
            chdir: "{{ conntrack_accounting.local_repo }}/{{ item }}"
            cmd: "go build"
          loop:
            - conntrack_accounting_tool
            - conntrack_psql_insert

        - name: Create conntrack_psql_insert.sh script
          ansible.builtin.template:
            src: conntrack_psql_insert.sh.j2
            dest: "{{ conntrack_accounting.local_repo }}/conntrack_psql_insert.sh"
            mode: "0700"

        - name: Template conntrack-psql-insert.service
          ansible.builtin.template:
            src: conntrack-psql-insert.service.j2
            dest: /etc/systemd/system/conntrack-psql-insert.service

        - name: Copy default ports.conf
          ansible.builtin.copy:
            src: ports.conf
            dest: /root/ports.conf

        - name: Check if ctf config dir has ports.conf
          ansible.builtin.stat:
            path: "{{ saarctf_config_dir }}/ports.conf"
          register: ports_stat

        - name: Copy ports.conf form ctf conf dir
          ansible.builtin.copy:
            src: "{{ saarctf_config_dir }}/ports.conf"
            dest: "/root/ports.conf"
            remote_src: True
          when: ports_stat.stat.exists

        - name: Ensure conntrack data dirs
          ansible.builtin.file:
            path: "{{ conntrack_accounting.data_dir }}/{{ item }}"
            state: directory
          loop:
            - processed
            - new

    # Enables IPv4 forwarding / eBPF JITk
    # TODO: Use sysctl module
    - name: Set various settings in sysctl.conf
      ansible.builtin.lineinfile:
        path: /etc/sysctl.conf
        line: "{{ item }}"
      loop:
        - "net.ipv4.ip_forward=1"
        - "net.core.bpf_jit_enable=1"
        - "net.netfilter.nf_conntrack_max=33554432"
        - "net.netfilter.nf_conntrack_expect_max=8192"
        - "net.netfilter.nf_conntrack_tcp_timeout_established=1200"
        - "net.core.rmem_max=671088640"
        - "net.core.rmem_default=671088640"
        - "net.core.wmem_max=671088640"
        - "net.core.wmem_default=671088640"

    - name: Add cronjob for conntrack hashsize
      ansible.builtin.cron:
        special_time: reboot
        user: root
        name: "conntrack-hashsize"
        job: "/usr/bin/echo 65536 > /sys/module/nf_conntrack/parameters/hashsize"

    - name: Template manage-hetzner-firewall
      ansible.builtin.template:
        src: "manage-hetzner-firewall.service.j2"
        dest: "/etc/systemd/system/manage-hetzner-firewall.service"

    - name: Copy custom services
      ansible.builtin.copy:
        src: "services/{{ item }}.service"
        dest: "/etc/systemd/system/{{ item }}.service"
      loop:
        - trafficstats
        - firewall
        - manage-iptables
        - tcpdump-team
        - tcpdump-game
        - vpn@
        - vpn2@
        - vpnboard
        - vpnboard-celery
        - conntrack-accounting

    - name: Configure AppArmor for tcpdump
      ansible.builtin.lineinfile:
        create: true
        path: /etc/apparmor.d/local/usr.sbin.tcpdump
        line: "/opt/gameserver/** rux,"

    - name: Ensure /var/log/vpn
      ansible.builtin.file:
        path: /var/log/vpn
        state: directory

    - name: Symlink OVPN stuff form config repo
      block:
        - name: Remove original OVPN config
          ansible.builtin.file:
            path: /etc/openvpn/server
            state: absent

        - name: Symlink vpn server config
          ansible.builtin.file:
            path: /etc/openvpn/server
            src: "{{ saarctf_config_dir }}/vpn/config-server"
            state: link
            force: yes

    - name: Configure NGINX
      block:
        - name: Remove default config
          ansible.builtin.file:
            path: /etc/nginx/sites-enabled/default
            state: absent

        - name: Template vpnboard nginx conf
          ansible.builtin.template:
            src: vpnboard.j2
            dest: "/etc/nginx/sites-available/vpnboard"

        - name: Symlink vpnboard nginx conf
          ansible.builtin.file:
            src: "/etc/nginx/sites-available/vpnboard"
            path: "/etc/nginx/sites-enabled/vpnboard"
            state: link

        - name: Ensure /var/www/vpnboard
          ansible.builtin.file:
            path: /var/www/vpnboard
            owner: www-data
            group: www-data
            state: directory

        - name: Symlink vpn.html
          ansible.builtin.file:
            force: yes # Does not necessarily exist at provision-time
            path: /var/www/vpnboard/index.html
            src: /var/www/vpnboard/vpn.html
            state: link

    - name: Configure Celery
      block:
        - name: Ensure /var/log/celery
          ansible.builtin.file:
            path: /var/log/celery
            owner: www-data
            group: www-data
            state: directory

        - name: Copy vpncelery.conf
          ansible.builtin.copy:
            src: vpncelery.conf
            dest: /etc/vpncelery.conf

    - name: Fix prometheus
      ansible.builtin.lineinfile:
        create: true
        path: /etc/default/prometheus-node-exporter
        line: 'ARGS="--collector.filesystem.ignored-mount-points=\"^/(dev|proc|run|sys|media|var/lib/docker)($|/)\""'

    - name: Enable all the services
      ansible.builtin.systemd_service:
        name: "{{ item }}"
        enabled: true
      loop:
        - trafficstats
        - manage-iptables
        - vpnboard
        - conntrack-psql-insert
        - conntrack-accounting

    - name: Create helper to run gameserver venv python
      ansible.builtin.template:
        src: vpnctl
        mode: "u=rwx,g=rx,o=rx"
        dest: /usr/local/bin/vpnctl

    - name: Update crontab
      block:
        - name: Set crontab env vars
          vars:
            env_vars:
              PATH: /opt/go/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
              SHELL: /bin/bash
              HOME: /root
          ansible.builtin.cron:
            env: yes
            name: "{{ item.key }}"
            value: "{{ item.value }}"
          loop: "{{ env_vars | dict2items }}"

        - name: Add configs-create crontab
          ansible.builtin.cron:
            name: "Configs create"
            minute: "5"
            hour: "*/4"
            job: "/root/configs-create.sh > /var/log/configs-create.log 2>&1"

        - name: Add teams-sync crontab
          ansible.builtin.cron:
            name: teams-sync
            minute: "*/3"
            job: "/root/teams-sync.sh > /var/log/teams-sync.log 2>&1"

    - name: Recompile BPF tools
      ignore_errors: true
      community.general.make:
        chdir: /opt/gameserver/vpn/pbf

    - name: Copy motd
      ansible.builtin.copy:
        src: motd
        dest: /etc/motd

    - name: iptables setup
      block:
        - name: Configure iptables ACCEPT
          vars:
            base_args:
              chain: INPUT
              ip_version: ipv4
              jump: ACCEPT
          ansible.builtin.iptables: "{{ base_args | combine(item) }}"
          loop:
            - { in_interface: ens10 }
            - { in_interface: enp7s0 }
            - { in_interface: lo }
            - { match: state, ctstate: [ ESTABLISHED, RELATED ] }
            - { in_interface: tun+, protocol: icmp, comment: "Ping to VPN gateway" }
            - { in_interface: tun+, protocol: udp, destination_port: 123, comment: "NTP on VPN gateway" }
            - { in_interface: tun+, jump: DROP }
            - { protocol: tcp, destination_port: 22, comment: "SSH" }
            - { protocol: tcp, destination_port: 80, comment: "HTTP / VPN-Board" }
            - { protocol: tcp, destination_port: 443, comment: "HTTP / VPN-Board" }
            - { protocol: udp, comment: "OpenVPN servers" }
            - { policy: DROP, jump: "{{ omit }}" }


        - name: configure ip6tables rules
          vars:
            base_args:
              chain: INPUT
              ip_version: ipv6
              jump: ACCEPT
          ansible.builtin.iptables: "{{ base_args | combine(item) }}"
          loop:
            - in_interface: ens10
            - in_interface: enp7s0
            - in_interface: lo
            - { protocol: tcp, destination_port: 22, comment: "SSH" }
            - { protocol: tcp, destination_port: 80, comment: "HTTP / VPN-Board" }
            - { protocol: tcp, destination_port: 443, comment: "HTTP / VPN-Board" }
            - { match: conntrack, ctstate: [ RELATED, ESTABLISHED ], protocol: icmpv6 }
            - { policy: DROP, jump: "{{ omit }}" }

        - name: save iptables rules
          ansible.builtin.shell:
            cmd: iptables-save > /etc/iptables/rules.v4

        - name: save ip6tables rules
          ansible.builtin.shell:
            cmd: ip6tables-save > /etc/iptables/rules.v6

    # Reset Cloud init, so it can do its magic in subsequent builds / boots
    - name: Run cloud-init clean
      ansible.builtin.shell:
        cmd: cloud-init clean

    - name: Ensure /mnt/pcaps
      ansible.builtin.file:
        path: /mtn/pcaps
        state: directory
